\import Data.List
\import Function.Meta
\import Paths
\import Paths.Meta
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestTest : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func M5t'''test : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (a ::) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => help $ reverse ys
  | a :: xs => trans (pmap (\lam x => x ++ a :: nil) (reverse++ xs ys)) (++-assoc (reverse ys) (reverse xs) (a :: nil))
  \where {
    \func help {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
      | nil => idp
      | x :: xs => pmap (x ::) (help xs)
  }

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | a :: xs => trans (reverse++ (reverse xs) (a :: nil)) (pmap (a ::) $ reverse-isInvolutive xs)

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => trans (pmap (\lam x => x + (m + k)) $ rdistr n m k) (swap4 (m * n) (k * n) m k)
    \where {
      \func swap4 (a b c d : Nat) : a + b + (c + d) = a + c + (b + d) \elim a
        | 0 => swap3 b c d
        | suc a => pmap suc $ swap4 a b c d
      \func swap3 (b c d : Nat) : b + (c + d) = c + (b + d) => rewriteI (+-assoc b c d) $ rewrite (+-comm b c) $ rewriteI (+-assoc c b d) idp
    }

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m, k
  | 0, 0 => idp
  | 0, suc k => idp
  | suc m, 0 => idp
  | suc m, suc k => trans (pmap (\lam x => x + n + n) $ ldistr n m k) (swap4 (n * m) (n * k) n n)
  \where {
    \func swap4 (a b c d : Nat) : a + b + c + d = a + c + (b + d) \elim a
      | 0 => swap3 b c d
      | suc a => pmap suc $ swap4 a b c d
    \func swap3 (b c d : Nat) : b + c + d = c + (b + d) => rewrite (+-comm b c) $ rewriteI (+-assoc c b d) idp
  }


-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f x b') p $ pmap (f a) q

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B =>
  transport (\lam t => t) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap B p) b