-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f : Nat -> Nat) (g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 3 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 5 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (_ _ _ : Bool) : Bool
  | true, t, _ => t
  | false, _, e => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim x, y
  | _, 0 => 1
  | x, suc y' => x * (x ^ y')

\func powTest1 : 2 ^ 4 = 16 => idp
\func powTest2 : 2 ^ 0 = 1 => idp
\func powTest3 : 0 ^ 100 = 0 => idp

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x' => fac x' * (suc x')

\func facTest1 : fac 0 = 1 => idp
\func facTest2 : fac 4 = 24 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => hlp x x y
    \where {
      \func hlp (fuel x y : Nat) : Nat \elim fuel
        | 0 => 0
        | suc fuel => lect01.if (x < y) x (hlp fuel (x - y) y)
    }

\func modTest1 : mod 10 2 = 0 => idp
\func modTest2 : mod 4 3 = 1 => idp

\func gcd (x y : Nat) => hlp (x + y) x y
    \where {
      \func hlp (fuel x y : Nat) : Nat \elim fuel, x, y
        | 0, _, _ => 0
        | _, 0, y' => y'
        | _, x', 0 => x'
        | suc fuel, x, y => lect01.if (x < y) (hlp fuel (y - x) x) (hlp fuel (x - y) y)
    }

\func gcdTest1 : gcd 12 4 = 4 => idp
\func gcdTest2 : gcd 12 0 = 12 => idp
\func gcdTest3 : gcd 0 12 = 12 => idp
