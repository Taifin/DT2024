\import Data.Bool
\import Data.List
\import Data.Or
\import Logic
\import hw01 (fac)
\import lect01 (<)

-- 1. Определите полиморфный tail для списков.
\func tail {A : \Type} (l : List A) : List A \elim l
  | nil => nil
  | a :: rst => rst

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

-- I had to use lect01.Bool in order to reuse lect01.< operator :(
\func sort {A : \Type} (lst : List A) (less : A -> A -> lect01.Bool) : List A => hlp nil lst less
    \where {
      \func hlp {A : \Type} (acc : List A) (lst : List A) (less : A -> A -> lect01.Bool) : List A \elim lst
        | nil => acc
        | hd :: rst => hlp (bub hd acc less) rst less
          \where
            \func bub {A : \Type} (elem : A) (acc : List A) (less : A -> A -> lect01.Bool) : List A \elim acc
              | nil => elem :: nil
              | hd :: rst => \case less elem hd \with {
                | lect01.Bool.true => elem :: hd :: rst
                | lect01.Bool.false => hd :: bub elem rst less
              }
    }

\func testSort1 : sort (2 :: 1 :: 3 :: nil) (<) = 1 :: 2 :: 3 :: nil => idp
\func testSort2 : sort (1 :: 2 :: 3 :: nil) (<) = 1 :: 2 :: 3 :: nil => idp
\func testSort3 : sort nil (<) = nil => idp
\func testSort4 : sort (4 :: 4 :: 3 :: 2 :: 1 :: nil) (<) = 1 :: 2 :: 3 :: 4 :: 4 :: nil => idp

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac3eq6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R =>
  \case h \with {
    | inl a => f a
    | inr b => g b
  }

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g ( f (\lam p _ => g p) )

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (p : \Sigma P Q) : R => f p.1 p.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => (
  \lam p => (f (inl p)).2,
  \lam q => (f (inr q)).1
)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q =>
  f (\lam (g : (P -> Q) -> P) => g \lam (h : P) => f \lam _ => h)

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> P x -> Q x) (g : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) => (g.1, h g.1 g.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty => \lam x y => \case h 3 \with {
  | inl p => p x
  | inr q => q y
}